/*
 * EUVD API
 *
 * API for querying recent vulnerabilities from the ENISA EUVD database.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VulnerabilityWithRelations {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "datePublished", skip_serializing_if = "Option::is_none")]
    pub date_published: Option<String>,
    #[serde(rename = "dateUpdated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    #[serde(rename = "baseScore", skip_serializing_if = "Option::is_none")]
    pub base_score: Option<f32>,
    #[serde(rename = "baseScoreVersion", skip_serializing_if = "Option::is_none")]
    pub base_score_version: Option<String>,
    #[serde(rename = "baseScoreVector", skip_serializing_if = "Option::is_none")]
    pub base_score_vector: Option<String>,
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<String>,
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<String>,
    #[serde(rename = "assigner", skip_serializing_if = "Option::is_none")]
    pub assigner: Option<String>,
    #[serde(rename = "epss", skip_serializing_if = "Option::is_none")]
    pub epss: Option<f32>,
    /// Date when the vulnerability has been known to be exploited
    #[serde(rename = "exploitedSince", skip_serializing_if = "Option::is_none")]
    pub exploited_since: Option<String>,
    #[serde(rename = "enisaIdProduct", skip_serializing_if = "Option::is_none")]
    pub enisa_id_product: Option<Vec<models::VulnerabilityEnisaIdProductInner>>,
    #[serde(rename = "enisaIdVendor", skip_serializing_if = "Option::is_none")]
    pub enisa_id_vendor: Option<Vec<models::VulnerabilityEnisaIdVendorInner>>,
    #[serde(rename = "enisaIdVulnerability", skip_serializing_if = "Option::is_none")]
    pub enisa_id_vulnerability: Option<Vec<models::EnisaIdVulnerabilityEntry>>,
    #[serde(rename = "enisaIdAdvisory", skip_serializing_if = "Option::is_none")]
    pub enisa_id_advisory: Option<Vec<serde_json::Value>>,
}

impl VulnerabilityWithRelations {
    pub fn new() -> VulnerabilityWithRelations {
        VulnerabilityWithRelations {
            id: None,
            description: None,
            date_published: None,
            date_updated: None,
            base_score: None,
            base_score_version: None,
            base_score_vector: None,
            references: None,
            aliases: None,
            assigner: None,
            epss: None,
            exploited_since: None,
            enisa_id_product: None,
            enisa_id_vendor: None,
            enisa_id_vulnerability: None,
            enisa_id_advisory: None,
        }
    }
}

